import streamlit as st
import os
import time
import uuid
from datetime import datetime, timedelta
from src.main import RAGPipeline
import json
st.set_page_config(
    page_title="RAG System",
    page_icon="üß†",   
    layout="wide",
    initial_sidebar_state="expanded"
)
if "rag_pipeline" not in st.session_state:
    st.session_state.rag_pipeline = RAGPipeline()
if "conversation_history" not in st.session_state:
    st.session_state.conversation_history = []
if "system_initialized" not in st.session_state:
    st.session_state.system_initialized = False
if "debug_mode" not in st.session_state:
    st.session_state.debug_mode = False
if "selected_documents" not in st.session_state:
    st.session_state.selected_documents = "all"
if "full_content_dialog" not in st.session_state:
    st.session_state.full_content_dialog = {"show": False, "filename": "", "content_data": None}
if "chat_sessions" not in st.session_state:
    st.session_state.chat_sessions = {"default": {"name": "–ù–æ–≤—ã–π —á–∞—Ç", "messages": [], "created_at": datetime.now()}}
if "current_session" not in st.session_state:
    st.session_state.current_session = "default"
if "show_rename_dialog" not in st.session_state:
    st.session_state.show_rename_dialog = None
if "show_dropdown_menu" not in st.session_state:
    st.session_state.show_dropdown_menu = None
if "documents_to_delete" not in st.session_state:
    st.session_state.documents_to_delete = []
if "rename_dialog" not in st.session_state:
    st.session_state.rename_dialog = {"show": False, "filename": "", "new_name": ""}
st.sidebar.title("RAG System")
page = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
    ["–ì–ª–∞–≤–Ω–∞—è", "–ß–∞—Ç", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
)
if not st.session_state.system_initialized:
    try:
        with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã..."):
            st.session_state.system_initialized = st.session_state.rag_pipeline.initialize_system(silent=True)
    except Exception as e:
        with st.sidebar:
            st.subheader("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
            st.error(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
            if st.button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é", type="primary"):
                st.session_state.system_initialized = st.session_state.rag_pipeline.initialize_system()
if st.session_state.system_initialized:
    with st.sidebar:
        if st.button("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", help="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"):
            st.session_state.system_initialized = st.session_state.rag_pipeline.initialize_system()
st.session_state.debug_mode = st.sidebar.checkbox("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", value=st.session_state.debug_mode)
if page == "–ß–∞—Ç":
    st.sidebar.markdown("""
    <style>
    div[data-testid="stSidebar"] .stButton > button {
        background: transparent;
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.9);
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: normal;
        transition: all 0.2s ease;
        min-height: 36px;
    }
    
    div[data-testid="stSidebar"] .stButton > button:hover {
        background: rgba(255, 255, 255, 0.1);
        border-color: rgba(255, 255, 255, 0.3);
        color: white;
    }
    
    div[data-testid="stSidebar"] .stSelectbox > div > div {
        background: transparent;
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 6px;
        color: rgba(255, 255, 255, 0.9);
        min-height: 36px;
    }
    
    div[data-testid="stSidebar"] .stSelectbox > div > div > div {
        color: rgba(255, 255, 255, 0.9);
        padding: 8px 12px;
        font-size: 14px;
    }
    
    div[data-testid="stSidebar"] .stTextInput > div > div > input {
        background: transparent;
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.9);
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 14px;
        min-height: 36px;
    }
    
    div[data-testid="stSidebar"] .stTextInput > div > div > input:focus {
        border-color: rgba(255, 255, 255, 0.4);
        outline: none;
        background: rgba(255, 255, 255, 0.05);
    }
    
    div[data-testid="stSidebar"] .stSelectbox svg {
        display: none;
    }
    
    div[data-testid="stSidebar"] .stSelectbox > div > div::after {
        content: "‚ãØ";
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: rgba(255, 255, 255, 0.5);
        font-size: 16px;
        pointer-events: none;
    }
    </style>
    """, unsafe_allow_html=True)
    
    
    all_chats = []
    chat_options = {}
    
    for session_id, session_data in st.session_state.chat_sessions.items():
        display_name = session_data["name"]
        if session_data["messages"] and display_name == "–ù–æ–≤—ã–π —á–∞—Ç":
            first_user_msg = next((msg for msg in session_data["messages"] if msg["role"] == "user"), None)
            if first_user_msg:
                display_name = first_user_msg["content"][:50]
                if len(first_user_msg["content"]) > 50:
                    display_name += "..."
        
        all_chats.append(display_name)
        chat_options[display_name] = session_id
    
    current_chat_name = None
    for name, sid in chat_options.items():
        if sid == st.session_state.current_session:
            current_chat_name = name
            break
    
    current_index = all_chats.index(current_chat_name) if current_chat_name in all_chats else 0
    
    if st.session_state.show_rename_dialog:
        st.sidebar.markdown('<div class="rename-mode">', unsafe_allow_html=True)
        current_name = st.session_state.chat_sessions[st.session_state.show_rename_dialog]["name"]
        new_name = st.sidebar.text_input(
            "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç:",
            value=current_name,
            key="rename_input",
            label_visibility="collapsed",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ..."
        )
        st.sidebar.markdown('</div>', unsafe_allow_html=True)
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key="save_rename", use_container_width=True):
                if new_name.strip():
                    st.session_state.chat_sessions[st.session_state.show_rename_dialog]["name"] = new_name.strip()
                st.session_state.show_rename_dialog = None
                st.rerun()
        with col2:
            if st.button("–û—Ç–º–µ–Ω–∞", key="cancel_rename", use_container_width=True):
                st.session_state.show_rename_dialog = None
                st.rerun()
    else:
        selected_chat = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç",
            all_chats,
            index=current_index,
            key="chat_selector"
        )
        
        if selected_chat and chat_options[selected_chat] != st.session_state.current_session:
            st.session_state.current_session = chat_options[selected_chat]
            st.rerun()
        
        if st.sidebar.button("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", key="rename_current", use_container_width=True):
            st.session_state.show_rename_dialog = st.session_state.current_session
            st.rerun()
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            if st.button("–ù–æ–≤—ã–π", key="new_chat_btn", use_container_width=True):
                new_session_id = str(uuid.uuid4())[:8]
                st.session_state.chat_sessions[new_session_id] = {
                    "name": "–ù–æ–≤—ã–π —á–∞—Ç",
                    "messages": [],
                    "created_at": datetime.now()
                }
                st.session_state.current_session = new_session_id
                st.rerun()
        with col2:
            if st.button("–£–¥–∞–ª–∏—Ç—å", key="delete_current", use_container_width=True):
                if len(st.session_state.chat_sessions) > 1:
                    del st.session_state.chat_sessions[st.session_state.current_session]
                    st.session_state.current_session = list(st.session_state.chat_sessions.keys())[0]
                    st.rerun()
    
    
if st.session_state.system_initialized:
    status = st.session_state.rag_pipeline.get_system_status()
    st.sidebar.subheader("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    st.sidebar.metric("–§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤", status["vector_store"]["total_documents"])
    st.sidebar.metric("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", status["vector_store"]["unique_files"])
    st.sidebar.metric("–ó–∞–ø—Ä–æ—Å–æ–≤", status["pipeline_stats"]["total_queries"])
    if st.session_state.selected_documents == "all":
        st.sidebar.write("**–ê–∫—Ç–∏–≤–Ω—ã—Ö:** –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    else:
        active_count = len(st.session_state.selected_documents) if isinstance(st.session_state.selected_documents, list) else 0
        total_count = status["vector_store"]["unique_files"]
        st.sidebar.write(f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {active_count} –∏–∑ {total_count}")
if page == "–ì–ª–∞–≤–Ω–∞—è":
    st.title("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    st.markdown("""
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:**
    - **–ó–∞–≥—Ä—É–∑–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    - **–£–º–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è** - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    - **–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
    - **–õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** - —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ Ollama
    
    **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:**
    - **LLM**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama
    - **Embeddings**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama
    - **Vector DB**: ChromaDB
    - **Interface**: Streamlit
    """)
    if not st.session_state.system_initialized:
        st.warning("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
    else:
        config = st.session_state.rag_pipeline.config_manager.get_current_config()
        st.info(f"**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:**")
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**LLM:** {config.llm_model}")
        with col2:
            st.write(f"**Embedding:** {config.embedding_model}")
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
            st.markdown("""
            1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏**
            2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª—ã
            3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ **–ß–∞—Ç** –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
            """)
        with col2:
            st.subheader("–°–æ–≤–µ—Ç—ã")
            st.markdown("""
            - –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            - –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            """)
elif page == "–î–æ–∫—É–º–µ–Ω—Ç—ã":
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
    if not st.session_state.system_initialized:
        st.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
    else:
        tab1, tab2, tab3 = st.tabs(["–ó–∞–≥—Ä—É–∑–∫–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"])
        with tab1:
            st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            upload_method = st.radio(
                "–°–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:",
                ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏", "–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ"]
            )
            if upload_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã":
                uploaded_files = st.file_uploader(
                    "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª—ã",
                    type="pdf",
                    accept_multiple_files=True
                )
                if uploaded_files:
                    if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã", type="primary"):
                        success_count = 0
                        for uploaded_file in uploaded_files:
                            if st.session_state.rag_pipeline.load_uploaded_file(uploaded_file):
                                success_count += 1
                        st.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤")
            elif upload_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏":
                directory_path = st.text_input(
                    "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å PDF —Ñ–∞–π–ª–∞–º–∏:",
                    placeholder="./data/documents"
                )
                if directory_path and st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏", type="primary"):
                    st.session_state.rag_pipeline.load_documents_from_directory(directory_path)
            else:
                st.info("–≠—Ç–∞ –æ–ø—Ü–∏—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã, —É–∂–µ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ø–∞–ø–∫–µ ./data/documents –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                docs_dir = "./data/documents"
                if os.path.exists(docs_dir):
                    pdf_files = [f for f in os.listdir(docs_dir) if f.endswith('.pdf')]
                    if pdf_files:
                        st.write(f"**–ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤:**")
                        for pdf_file in pdf_files:
                            file_path = os.path.join(docs_dir, pdf_file)
                            file_size = os.path.getsize(file_path) / 1024 / 1024
                            st.write(f"‚Ä¢ {pdf_file} ({file_size:.1f} MB)")
                        col1, col2 = st.columns(2)
                        with col1:
                            clear_first = st.checkbox(
                                "–û—á–∏—Å—Ç–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π", 
                                value=True,
                                help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (overlap=200, —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)"
                            )
                        with col2:
                            if st.button("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
                                if clear_first:
                                    st.info("–û—á–∏—Å—Ç–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã...")
                                    if st.session_state.rag_pipeline.clear_all_data():
                                        st.write("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")
                                    else:
                                        st.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏")
                                        st.stop()
                                st.info(f"–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è {len(pdf_files)} —Ñ–∞–π–ª–æ–≤...")
                                success = st.session_state.rag_pipeline.reindex_existing_documents(docs_dir)
                                if success:
                                    st.write("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                    else:
                        st.warning("–í –ø–∞–ø–∫–µ ./data/documents –Ω–µ—Ç PDF —Ñ–∞–π–ª–æ–≤")
                else:
                    st.error("–ü–∞–ø–∫–∞ ./data/documents –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        with tab2:
            st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            document_summary = st.session_state.rag_pipeline.vector_store.get_document_summary()
            if document_summary["total_documents"] > 0:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤", document_summary["total_documents"])
                with col2:
                    st.metric("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", document_summary["unique_files"])
                with col3:
                    docs_dir = "./data/documents"
                    if os.path.exists(docs_dir):
                        physical_files = len([f for f in os.listdir(docs_dir) if f.endswith('.pdf')])
                        st.metric("–§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤", physical_files)
                    else:
                        st.metric("–§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤", 0)
                st.markdown("---")
                if document_summary["filenames"]:
                    st.write("**–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
                    for idx, filename in enumerate(document_summary["filenames"]):
                        file_details = document_summary["file_details"].get(filename, {})
                        chunk_count = file_details.get('chunk_count', 0)
                        page_count = file_details.get('page_count', 'Unknown')
                        with st.expander(f"{filename} ({chunk_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü)", expanded=False):
                            col_info, col_preview = st.columns([1, 2])
                            with col_info:
                                st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:**")
                                st.write(f"‚Ä¢ –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {chunk_count}")
                                st.write(f"‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü –≤ PDF: {page_count}")
                                st.write(f"‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {file_details.get('original_name', filename)}")
                                file_info = st.session_state.rag_pipeline.document_processor.get_physical_file_info(filename)
                                if file_info.get("exists"):
                                    st.write(f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_info.get('size_mb', 0)} MB")
                                    st.write(f"‚Ä¢ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {file_info.get('modified_time', 'Unknown')}")
                                    st.write("–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
                                else:
                                    st.error("–§–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
                            with col_preview:
                                st.markdown("**–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:**")
                                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞..."):
                                    preview = st.session_state.rag_pipeline.vector_store.get_document_preview(filename, max_length=300)
                                if preview and preview != "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω":
                                    st.text_area(
                                        label="preview", 
                                        value=preview,
                                        height=120,
                                        disabled=True,
                                        key=f"preview_{filename}_{idx}",
                                        label_visibility="collapsed"
                                    )
                                    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç", key=f"full_content_btn_{filename}_{idx}", type="secondary"):
                                        st.session_state.full_content_dialog = {
                                            "show": True,
                                            "filename": filename,
                                            "content_data": None
                                        }
                                        st.rerun()
                                else:
                                    st.warning("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                st.info("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ó–∞–≥—Ä—É–∑–∫–∞' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")
            if st.session_state.full_content_dialog["show"]:
                filename = st.session_state.full_content_dialog["filename"]
                st.markdown("---")
                st.subheader(f"–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {filename}")
                if st.session_state.full_content_dialog["content_data"] is None:
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
                        content_data = st.session_state.rag_pipeline.vector_store.get_full_document_content(filename)
                        st.session_state.full_content_dialog["content_data"] = content_data
                content_data = st.session_state.full_content_dialog["content_data"]
                if content_data and content_data.get("success"):
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("–§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤", content_data.get("total_chunks", 0))
                    with col2:
                        st.metric("–°—Ç—Ä–∞–Ω–∏—Ü", content_data.get("page_count", "Unknown"))
                    with col3:
                        chars = content_data.get("total_characters", 0)
                        st.metric("–°–∏–º–≤–æ–ª–æ–≤", f"{chars:,}")
                    with col4:
                        words = len(content_data.get("content", "").split())
                        st.metric("–°–ª–æ–≤", f"{words:,}")
                    st.markdown("---")
                    st.markdown("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:**")
                    col1, col2, col3 = st.columns([3, 1, 1])
                    with col2:
                        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", type="secondary", use_container_width=True):
                            st.code(content_data["content"], language=None)
                    with col3:
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                            st.session_state.full_content_dialog = {"show": False, "filename": "", "content_data": None}
                            st.rerun()
                    st.text_area(
                        label="–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                        value=content_data["content"],
                        height=600,
                        disabled=True,
                        key=f"full_content_{filename}",
                        label_visibility="collapsed"
                    )
                    with st.expander("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö", expanded=False):
                        st.write(f"**–§–∞–π–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ {content_data['total_chunks']} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:**")
                        for i, chunk_data in enumerate(content_data.get("chunks", [])[:10]):
                            chunk_text = chunk_data["text"][:200] + "..." if len(chunk_data["text"]) > 200 else chunk_data["text"]
                            st.write(f"**–§—Ä–∞–≥–º–µ–Ω—Ç {i+1}:** {chunk_text}")
                        if len(content_data.get("chunks", [])) > 10:
                            st.write(f"... –∏ –µ—â–µ {len(content_data['chunks']) - 10} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    if st.button("–ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                        st.session_state.full_content_dialog = {"show": False, "filename": "", "content_data": None}
                        st.rerun()
        with tab3:
            st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
            document_summary = st.session_state.rag_pipeline.vector_store.get_document_summary()
            available_files = document_summary.get("filenames", [])
            if available_files:
                st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
                doc_selection = st.radio(
                    "–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:",
                    ["–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"],
                    key="document_filter_mode_mgmt"
                )
                if doc_selection == "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã":
                    selected_files = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:",
                        options=available_files,
                        default=available_files if st.session_state.selected_documents == "all" else st.session_state.selected_documents,
                        key="selected_files_mgmt"
                    )
                    st.session_state.selected_documents = selected_files if selected_files else "all"
                else:
                    st.session_state.selected_documents = "all"
                if st.session_state.selected_documents == "all":
                    st.info("–ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
                else:
                    selected_count = len(st.session_state.selected_documents)
                    total_count = len(available_files)
                    st.info(f"–ü–æ–∏—Å–∫ –≤ {selected_count} –∏–∑ {total_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                st.markdown("---")
                st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
                st.write("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:**")
                selected_for_deletion = []
                for filename in available_files:
                    file_details = document_summary["file_details"].get(filename, {})
                    chunk_count = file_details.get('chunk_count', 0)
                    col1, col2, col3 = st.columns([0.1, 0.7, 0.2])
                    with col1:
                        if st.checkbox("", key=f"delete_checkbox_{filename}"):
                            selected_for_deletion.append(filename)
                    with col2:
                        st.write(f"**{filename}**")
                        st.caption(f"{chunk_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
                    with col3:
                        if st.button("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", help=f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å {filename}", key=f"rename_btn_{filename}", type="secondary", use_container_width=True):
                            st.session_state.rename_dialog = {
                                "show": True,
                                "filename": filename,
                                "new_name": filename
                            }
                            st.rerun()
                if st.session_state.rename_dialog["show"]:
                    st.markdown("---")
                    st.subheader(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {st.session_state.rename_dialog['filename']}")
                    col1, col2, col3 = st.columns([2, 1, 1])
                    with col1:
                        new_name = st.text_input(
                            "–ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:",
                            value=st.session_state.rename_dialog["new_name"],
                            key="rename_input_field"
                        )
                    with col2:
                        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary", use_container_width=True):
                            if new_name and new_name != st.session_state.rename_dialog["filename"]:
                                old_filename = st.session_state.rename_dialog["filename"]
                                if not new_name.lower().endswith('.pdf'):
                                    new_name += '.pdf'
                                success = True
                                file_renamed = st.session_state.rag_pipeline.document_processor.rename_physical_file(old_filename, new_name)
                                if file_renamed:
                                    metadata_updated = st.session_state.rag_pipeline.vector_store.update_filename_in_metadata(old_filename, new_name)
                                    success = file_renamed and metadata_updated
                                else:
                                    success = False
                                if success:
                                    st.write(f"–î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old_filename} ‚Üí {new_name}")
                                    st.session_state.rename_dialog = {"show": False, "filename": "", "new_name": ""}
                                    st.rerun()
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
                            else:
                                st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
                    with col3:
                        if st.button("–û—Ç–º–µ–Ω–∞", use_container_width=True):
                            st.session_state.rename_dialog = {"show": False, "filename": "", "new_name": ""}
                            st.rerun()
                if selected_for_deletion:
                    st.markdown("---")
                    st.subheader(f"–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({len(selected_for_deletion)} –≤—ã–±—Ä–∞–Ω–æ)")
                    col1, col2 = st.columns(2)
                    with col1:
                        delete_from_vector = st.checkbox(
                            "–£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã", 
                            value=True,
                            help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–∞"
                        )
                    with col2:
                        delete_physical = st.checkbox(
                            "–£–¥–∞–ª–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã", 
                            value=False,
                            help="–£–¥–∞–ª–∏—Ç—å PDF —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ"
                        )
                    st.write("**–§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**")
                    for filename in selected_for_deletion:
                        st.write(f"‚Ä¢ {filename}")
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"–£–¥–∞–ª–∏—Ç—å ({len(selected_for_deletion)})", type="secondary", use_container_width=True):
                            deleted_count = 0
                            errors = []
                            for filename in selected_for_deletion:
                                try:
                                    success = True
                                    if delete_from_vector:
                                        vector_success = st.session_state.rag_pipeline.vector_store.delete_documents_by_filename(filename)
                                        success = success and vector_success
                                    if delete_physical:
                                        file_success = st.session_state.rag_pipeline.document_processor.delete_physical_file(filename)
                                        success = success and file_success
                                    if success:
                                        deleted_count += 1
                                    else:
                                        errors.append(filename)
                                except Exception as e:
                                    errors.append(f"{filename} (–æ—à–∏–±–∫–∞: {str(e)})")
                            if deleted_count > 0:
                                st.write(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                            if errors:
                                st.error(f"–û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {', '.join(errors)}")
                            if deleted_count > 0:
                                st.rerun()
                    with col2:
                        if st.button("–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", use_container_width=True):
                            st.rerun()
                st.markdown("---")
            st.subheader("–û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É", type="secondary", use_container_width=True):
                    if st.session_state.rag_pipeline.clear_all_data():
                        st.write("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã")
            with col2:
                st.info("–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ /data/documents/")
            if available_files:
                st.markdown("---")
                st.subheader("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ", len(available_files))
                with col2:
                    docs_dir = "./data/documents"
                    physical_count = 0
                    if os.path.exists(docs_dir):
                        physical_count = len([f for f in os.listdir(docs_dir) if f.endswith('.pdf')])
                    st.metric("–ù–∞ –¥–∏—Å–∫–µ", physical_count)
                with col3:
                    total_chunks = document_summary.get("total_documents", 0)
                    st.metric("–í—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤", total_chunks)
elif page == "–ß–∞—Ç":
    st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    
    status = st.session_state.rag_pipeline.get_system_status()
    total_fragments = status["vector_store"]["total_documents"]
    total_files = status["vector_store"]["unique_files"]
    
    st.caption(f"{total_files} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Ä¢ {total_fragments} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
    
    if not st.session_state.system_initialized:
        st.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
    elif status["vector_store"]["total_documents"] == 0:
        st.warning("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    else:
        st.markdown("""
        <style>
        .stChatMessage > div:first-child {
            display: none !important;
        }
        .stJson {
            max-height: 250px;
            overflow-y: auto;
        }
        </style>
        """, unsafe_allow_html=True)
        
        current_messages = st.session_state.chat_sessions[st.session_state.current_session]["messages"]
        
        for message in current_messages:
            with st.chat_message(message["role"]):
                if message["role"] == "user":
                    st.markdown(message["content"])
                else:
                    st.markdown(message["content"])
                    
                    if "metadata" in message and st.session_state.debug_mode:
                        metadata = message["metadata"]
                        debug_info = metadata.get("debug_info", {})
                        
                        # 1. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                        with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", expanded=False):
                            if metadata.get("sources"):
                                for source in metadata["sources"]:
                                    st.caption(f"‚Ä¢ {source['filename']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['relevance']:.2f})")
                            else:
                                st.caption("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        
                        # 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                        with st.expander("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞", expanded=False):
                            if debug_info and debug_info.get("query_analysis"):
                                query_analysis = debug_info["query_analysis"]
                                lang = query_analysis.get("language", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                                query_type = query_analysis.get("query_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω") 
                                keywords = query_analysis.get("keywords", [])
                                
                                st.caption(f"**–Ø–∑—ã–∫:** {lang}")
                                st.caption(f"**–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** {query_type}")
                                if keywords:
                                    st.caption(f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(keywords)}")
                            else:
                                st.caption("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        
                        # 3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                        with st.expander("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", expanded=False):
                            time_resp = metadata.get("response_time", 0)
                            type_resp = metadata.get("response_type", "unknown")
                            st.caption(f"**–í—Ä–µ–º—è –∏ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:** {time_resp:.2f}—Å, —Ç–∏–ø: {type_resp}")
                            
                            if debug_info and debug_info.get("search_results"):
                                search_results = debug_info["search_results"]
                                sources_count = len(metadata.get("sources", []))
                                st.caption(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:** –Ω–∞–π–¥–µ–Ω–æ: {len(search_results)}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {sources_count}")
                            else:
                                st.caption("–î–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        
                        # 4. –û—Ç–ª–∞–¥–∫–∞ (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                        with st.expander("–û—Ç–ª–∞–¥–∫–∞", expanded=False):
                            if debug_info:
                                st.json(debug_info)
                            else:
                                st.caption("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        prompt = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        if prompt:
            user_message = {"role": "user", "content": prompt}
            st.session_state.chat_sessions[st.session_state.current_session]["messages"].append(user_message)
            
            with st.chat_message("user"):
                st.markdown(prompt)
            
            with st.chat_message("assistant"):
                with st.spinner("–î—É–º–∞—é..."):
                    response = st.session_state.rag_pipeline.process_query(
                        prompt, 
                        show_debug=st.session_state.debug_mode,
                        selected_documents=st.session_state.selected_documents
                    )
                
                full_response = response["answer"]
                
                # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
                def stream_response():
                    for char in full_response:
                        yield char
                        time.sleep(0.02)
                
                st.write_stream(stream_response())
                
                metadata = {
                    "response_time": response.get("response_time", 0),
                    "response_type": response.get("response_type", "unknown"),
                    "sources": response.get("sources", []),
                }
                
                if st.session_state.debug_mode:
                    metadata["debug_info"] = response
                    
                    # 1. –ò—Å—Ç–æ—á–Ω–∏–∫–∏
                    with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", expanded=False):
                        if response.get("sources"):
                            for source in response["sources"]:
                                st.caption(f"‚Ä¢ {source['filename']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['relevance']:.2f})")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö
                        if response.get("search_results"):
                            pages_info = {}
                            fragment_counts = {}
                            
                            for result in response["search_results"]:
                                filename = result.get("metadata", {}).get("filename", "Unknown")
                                page = result.get("metadata", {}).get("source_page", "Unknown")
                                
                                if filename not in pages_info:
                                    pages_info[filename] = set()
                                    fragment_counts[filename] = 0
                                
                                if page != "Unknown":
                                    pages_info[filename].add(str(page))
                                fragment_counts[filename] += 1
                            
                            if pages_info:
                                st.caption("**–°—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:**")
                                for filename, pages in pages_info.items():
                                    pages_str = ", ".join(sorted(pages)) if pages else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                                    fragments = fragment_counts.get(filename, 0)
                                    st.caption(f"‚Ä¢ {filename}: —Å—Ç—Ä. {pages_str} ({fragments} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)")
                    
                    # 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                    with st.expander("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞", expanded=False):
                        query_analysis = response.get("query_analysis", {})
                        routing_result = response.get("routing_result", {})
                        
                        # –Ø–∑—ã–∫, —Ç–∏–ø, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        if query_analysis:
                            lang = query_analysis.get("language", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                            query_type = query_analysis.get("query_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                            keywords = query_analysis.get("keywords", [])
                            
                            st.caption(f"**–Ø–∑—ã–∫:** {lang}")
                            st.caption(f"**–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:** {query_type}")
                            if keywords:
                                st.caption(f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(keywords)}")
                        
                        # –†–µ—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
                        if routing_result:
                            reasoning = routing_result.get("reasoning", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                            confidence = routing_result.get("confidence", 0)
                            can_answer = routing_result.get("can_answer", False)
                            
                            st.caption(f"**–†–µ—à–µ–Ω–∏–µ:** {'–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å' if can_answer else '–Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å'}")
                            st.caption(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.2f}")
                            st.caption(f"**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {reasoning}")
                    
                    # 3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    with st.expander("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", expanded=False):
                        # –í—Ä–µ–º—è –∏ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                        time_resp = response.get("response_time", 0)
                        type_resp = response.get("response_type", "unknown")
                        st.caption(f"**–í—Ä–µ–º—è –∏ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:** {time_resp:.2f}—Å, —Ç–∏–ø: {type_resp}")
                        
                        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                        search_results = response.get("search_results", [])
                        sources_count = len(response.get("sources", []))
                        st.caption(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:** –Ω–∞–π–¥–µ–Ω–æ: {len(search_results)}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {sources_count}")
                        
                        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏
                        if search_results:
                            similarities = [r.get("similarity", 0) for r in search_results if "similarity" in r]
                            if similarities:
                                avg_sim = sum(similarities) / len(similarities)
                                max_sim = max(similarities)
                                st.caption(f"**–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏:** —Å—Ä–µ–¥–Ω—è—è: {avg_sim:.2f}, –º–∞–∫—Å: {max_sim:.2f}")
                    
                    # 4. –û—Ç–ª–∞–¥–∫–∞
                    with st.expander("–û—Ç–ª–∞–¥–∫–∞", expanded=False):
                        st.json(response)
            
            assistant_message = {
                "role": "assistant", 
                "content": full_response,
                "metadata": metadata
            }
            st.session_state.chat_sessions[st.session_state.current_session]["messages"].append(assistant_message)
            
            conversation_entry = {
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "question": prompt,
                "answer": full_response,
                "response_type": response.get("response_type", "unknown"),
                "response_time": response.get("response_time", 0),
                "sources": response.get("sources", [])
            }
            st.session_state.conversation_history.insert(0, conversation_entry)
elif page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    if not st.session_state.system_initialized:
        st.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        tab1, tab2, tab3 = st.tabs(["–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–≠–∫—Å–ø–æ—Ä—Ç", "–°–∏—Å—Ç–µ–º–∞"])
        with tab1:
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã RAG —Å–∏—Å—Ç–µ–º—ã")
            st.markdown("### –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π Ollama")
            available_models = st.session_state.rag_pipeline.config_manager.get_available_models()
            current_config = st.session_state.rag_pipeline.config_manager.get_current_config()
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("#### –ú–æ–¥–µ–ª—å LLM")
                if available_models['llm']:
                    current_llm_index = 0
                    if current_config.llm_model in available_models['llm']:
                        current_llm_index = available_models['llm'].index(current_config.llm_model)
                    selected_llm = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ LLM –º–æ–¥–µ–ª—å",
                        available_models['llm'],
                        index=current_llm_index,
                        key="llm_model_select"
                    )
                    if selected_llm != current_config.llm_model:
                        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å LLM –º–æ–¥–µ–ª—å", key="apply_llm"):
                            if st.session_state.rag_pipeline.update_models(llm_model=selected_llm):
                                st.rerun()
                else:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π")
                    st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LLM –º–æ–¥–µ–ª—å: ollama pull <model_name>")
            with col2:
                st.markdown("#### –ú–æ–¥–µ–ª—å Embedding")
                if available_models['embedding']:
                    current_embed_index = 0
                    if current_config.embedding_model in available_models['embedding']:
                        current_embed_index = available_models['embedding'].index(current_config.embedding_model)
                    selected_embedding = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ Embedding –º–æ–¥–µ–ª—å",
                        available_models['embedding'],
                        index=current_embed_index,
                        key="embedding_model_select"
                    )
                    if selected_embedding != current_config.embedding_model:
                        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å Embedding –º–æ–¥–µ–ª—å", key="apply_embedding"):
                            if st.session_state.rag_pipeline.update_models(embedding_model=selected_embedding):
                                st.rerun()
                else:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Embedding –º–æ–¥–µ–ª–µ–π")
                    st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Embedding –º–æ–¥–µ–ª—å: ollama pull <model_name>")
            st.markdown("#### –¢–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏")
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"**LLM:** {current_config.llm_model}")
            with col2:
                st.info(f"**Embedding:** {current_config.embedding_model}")
            if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", key="refresh_models"):
                st.rerun()
            st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏")
            st.markdown("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            st.code("ollama pull <model_name>", language="bash")
            st.markdown("**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:**")
            st.markdown("- **LLM:** `llama3.2:latest`, `deepseek-r1:latest`")
            st.markdown("- **Embedding:** `nomic-embed-text:latest`, `mxbai-embed-large:latest`")
            st.markdown("---")
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞")
            current_threshold = st.session_state.rag_pipeline.router.confidence_threshold
            new_threshold = st.slider(
                "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏",
                min_value=0.0,
                max_value=1.0,
                value=current_threshold,
                step=0.05,
                help="–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ = –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"
            )
            if new_threshold != current_threshold:
                st.session_state.rag_pipeline.router.update_confidence_threshold(new_threshold)
                st.write(f"–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_threshold}")
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            chunk_size = st.number_input(
                "–†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞",
                min_value=500,
                max_value=2000,
                value=1000,
                step=100,
                help="–†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö"
            )
            chunk_overlap = st.number_input(
                "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤",
                min_value=0,
                max_value=500,
                value=100,
                step=50,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏"
            )
            if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
                st.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –Ω–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
            search_k = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞",
                min_value=1,
                max_value=20,
                value=10,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"
            )
            st.markdown("#### –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", expanded=False):
                st.info("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
                high_confidence_threshold = st.slider(
                    "–ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                    min_value=0.1,
                    max_value=1.0,
                    value=0.5,
                    step=0.1,
                    help="–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å"
                )
                min_context_length = st.number_input(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                    min_value=10,
                    max_value=500,
                    value=100,
                    help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"
                )
                st.caption("‚Ä¢ –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è = –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å)")
                st.caption("‚Ä¢ –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è = –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫)")
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM")
            temperature = st.slider(
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                min_value=0.0,
                max_value=1.0,
                value=0.1,
                step=0.1,
                help="–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
            )
            
        with tab2:
            st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            if st.session_state.conversation_history:
                st.markdown("### –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
                if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"):
                    export_text = st.session_state.rag_pipeline.export_conversation(
                        st.session_state.conversation_history
                    )
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                        data=export_text,
                        filename=f"rag_conversation_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                        mime="text/markdown"
                    )
            else:
                st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø—É—Å—Ç–∞")
        with tab3:
            st.subheader("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            status = st.session_state.rag_pipeline.get_system_status()
            st.markdown("### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π")
            current_config = st.session_state.rag_pipeline.config_manager.get_current_config()
            available_models = st.session_state.rag_pipeline.config_manager.get_available_models()
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("#### LLM –ú–æ–¥–µ–ª—å")
                llm_info = st.session_state.rag_pipeline.config_manager.get_model_info(current_config.llm_model)
                if llm_info:
                    model_data = {
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": llm_info.get('name', 'N/A'),
                        "–†–∞–∑–º–µ—Ä": llm_info.get('size', 'N/A'),
                        "–ò–∑–º–µ–Ω–µ–Ω–æ": llm_info.get('modified_at', 'N/A'),
                        "–°—Ç–∞—Ç—É—Å": "–î–æ—Å—Ç—É–ø–Ω–∞" if current_config.llm_model in available_models['llm'] else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    }
                    st.json(model_data)
                else:
                    st.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            with col2:
                st.markdown("#### Embedding –ú–æ–¥–µ–ª—å")
                embed_info = st.session_state.rag_pipeline.config_manager.get_model_info(current_config.embedding_model)
                if embed_info:
                    model_data = {
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": embed_info.get('name', 'N/A'),
                        "–†–∞–∑–º–µ—Ä": embed_info.get('size', 'N/A'),
                        "–ò–∑–º–µ–Ω–µ–Ω–æ": embed_info.get('modified_at', 'N/A'),
                        "–°—Ç–∞—Ç—É—Å": "–î–æ—Å—Ç—É–ø–Ω–∞" if current_config.embedding_model in available_models['embedding'] else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    }
                    st.json(model_data)
                else:
                    st.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            st.markdown("#### –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("LLM –º–æ–¥–µ–ª–∏", len(available_models['llm']))
                if available_models['llm']:
                    st.write("–°–ø–∏—Å–æ–∫:")
                    for model in available_models['llm'][:5]:
                        st.write(f"  ‚Ä¢ {model}")
                    if len(available_models['llm']) > 5:
                        st.write(f"  ... –∏ –µ—â–µ {len(available_models['llm']) - 5}")
            with col2:
                st.metric("Embedding –º–æ–¥–µ–ª–∏", len(available_models['embedding']))
                if available_models['embedding']:
                    st.write("–°–ø–∏—Å–æ–∫:")
                    for model in available_models['embedding'][:5]:
                        st.write(f"  ‚Ä¢ {model}")
                    if len(available_models['embedding']) > 5:
                        st.write(f"  ... –∏ –µ—â–µ {len(available_models['embedding']) - 5}")
            st.markdown("---")
            st.markdown("### –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            st.json(status["vector_store"])
            st.markdown("### LLM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.json(status["llm"])
            st.markdown("### –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä")
            st.json(status["router"])
            st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞")
            st.json(status["pipeline_stats"])
            st.markdown("### –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"):
                    st.session_state.system_initialized = False
                    st.session_state.rag_pipeline = RAGPipeline()
                    st.write("–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    st.rerun()
            with col2:
                if st.button("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                    st.session_state.clear()
                    st.write("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                    st.rerun()
